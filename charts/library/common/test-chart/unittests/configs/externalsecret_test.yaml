---
# yaml-language-server: $schema=https://raw.githubusercontent.com/helm-unittest/helm-unittest/main/schema/helm-testsuite.json
suite: configs externalsecret
templates:
  - common.yaml
values:
  - ../_values/components_main_default_container.yaml
tests:
  - it: externalsecret configs type should pass
    set:
      configs:
        externalsecret:
          enabled: true
          type: externalsecret
          name: mySettings
    asserts:
      - documentIndex: 0
        isKind:
          of: Deployment
      - documentIndex: 0
        equal:
          path: spec.template.spec.volumes[0]
          value:
            name: externalsecret
            secret:
              secretName: mySettings

  - it: externalsecret configs type with name template should pass
    set:
      configs:
        externalsecret:
          enabled: true
          type: externalsecret
          name: "{{ .Release.Name }}-config"
    asserts:
      - documentIndex: 0
        isKind:
          of: Deployment
      - documentIndex: 0
        equal:
          path: spec.template.spec.volumes[0]
          value:
            name: externalsecret
            secret:
              secretName: RELEASE-NAME-config

  - it: externalsecret configs type with identifier reference should pass
    set:
      externalsecrets:
        mySettings:
          data:
          - secretKey: username
            remoteRef:
              key: database-credentials
      configs:
        externalsecret:
          type: externalsecret
          identifier: mySettings
    asserts:
      - documentIndex: 0
        isKind:
          of: Deployment
      - documentIndex: 0
        equal:
          path: spec.template.spec.volumes[0]
          value:
            name: externalsecret
            secret:
              secretName: RELEASE-NAME-mySettings

  - it: externalsecret configs type with target name should pass
    set:
      externalsecrets:
        mySettings:
          target:
            name: target-name
          data:
          - secretKey: username
            remoteRef:
              key: database-credentials
      configs:
        externalsecret:
          type: externalsecret
          identifier: mySettings
    asserts:
      - documentIndex: 0
        isKind:
          of: Deployment
      - documentIndex: 0
        equal:
          path: spec.template.spec.volumes[0]
          value:
            name: externalsecret
            secret:
              secretName: target-name

  - it: externalsecret configs type with invalid identifier reference should fail
    set:
      configs:
        externalsecret:
          type: externalsecret
          identifier: doesNotExist
    asserts:
      - failedTemplate:
          errorMessage: "No externalsecret found with this identifier. (configs item 'externalsecret', identifier 'doesNotExist')"
